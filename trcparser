#!/bin/env perl 
use FileHandle;
use Text::Wrap;
use Storable qw(dclone);
use Getopt::Long;
use Data::Dumper;
use strict;
use warnings;

# ---------------------------------------------------------------------
our $program = "trcparser";
( my $version ) = '$Revision: 1.11 $' =~ /([\d\.]+)/;
our $debug = "" ; # "AAS|CLOSE|PEF|STRU";

our $first_tim;
our $last_tim;
our $cursor;

# ---------------------------------------------------------------------
# Options
our $infile;     # nom du fichier d'entrée [obligatoire]
our $outfile;    # nom du fichier de sortie
our $top       = -1;       # nb de sql affichés (-1 -> tout)
our $aggregate = 1;        # agregation par defaut des executions
our $sys       = 0;        # non affichage par def. des ordres SYS
our $waits     = 0;        # non affichage par def. des attentes
our $sort      = "ela";    # tri par défaut sur la durée d'exécution
our $help      = 0;
our $INF;                  # Handle du fichier d'entrée
our $OUTF;                 # Handle du fichier de sortie

# Non paramétrable pour l'instant
#   -> longueur maximale de ligne pour le formatage SQL
our $sqlmaxlen = 80;
$Text::Wrap::columns = $sqlmaxlen;
$Text::Wrap::break   = qr/(\s|(?=,))/;
our $pretty_delim = "=" x $sqlmaxlen;

sub usage {
   print <<__HERE;
$program - $version
Usage: $program -infile tracefile [-outfile outputfile]
              [-print] [-aggregate] [-sys] [-waits] [-sort]
  print=integer    List only the first 'integer' SQL statements.
  aggregate=yes|no
  sys=no           $program does not list SQL statements run as user SYS.
  waits=yes|no     Record summary for any wait events found in the trace file.
  sort=option      One of the following sort options:
    prscnt  number of times parse was called
    prscpu  cpu time parsing
    prsela  elapsed time parsing
    prsdsk  number of disk reads during parse
    prsqry  number of buffers for consistent read during parse
    prscu   number of buffers for current read during parse
    prsmis  number of misses in library cache during parse
    execnt  number of execute was called
    execpu  cpu time spent executing
    exeela  elapsed time executing
    exedsk  number of disk reads during execute
    exeqry  number of buffers for consistent read during execute
    execu   number of buffers for current read during execute
    exerow  number of rows processed during execute
    exemis  number of library cache misses during execute
    fchcnt  number of times fetch was called
    fchcpu  cpu time spent fetching
    fchela  elapsed time fetching
    fchdsk  number of disk reads during fetch
    fchqry  number of buffers for consistent read during fetch
    fchcu   number of buffers for current read during fetch
    fchrow  number of rows fetched
    userid  userid of user that parsed the cursor
__HERE
}    # usage

sub process_options {
   GetOptions(
      "infile=s"  => \$infile,
      "outfile=s" => \$outfile,
      "print=i"   => \$top,
      "aggregate" => \$aggregate,
      "sys"       => \$sys,
      "waits"     => \$waits,
      "sort=s"    => \$sort,
      "help"      => \$help,
   );

   if ( $help || !defined $infile ) {
      usage();
      exit(0);
   }

   # ouverture du fichier d'entrée
   open $INF, "<$infile"
     || die "Impossible d'ouvrir le fichier en entrée $infile: $!\n";
   if ( defined $outfile ) {
      open $OUTF, ">$outfile"
        || die "Impossible d'ouvrir le fichier en sortie $outfile: $!\n";
   }
   else { $OUTF = *STDOUT; }

   $OUTF->autoflush(1);
}    # process_options

our %ac;    # cursors

# indexes par des id de curseurs
#
#
our %as;       # sqlids
our %aw;       # waits
our %plans;    # execution plans

sub nvl {
   my ($param, $replace) = @_;
   return (defined $param) ? $param : (defined $replace) ? $replace : 0 ;
}

sub cur_sqlid {
   my $cursor = shift;
   return nvl( $ac{$cursor}{sqlid}, "Unknown" );
}

# On veut pouvoir récapituler les durées des exécutions individuelles d'un SQL
# particulier, au format suivant:
#              parse         exec      fetch
# timestamp   plan   count   ela   cpu   ela   cpu   count   ela   cpu   rows
#
# Pour ceci, on a les regles suivantes:

# Un PARSING IN CURSOR définit systématiquement une nouvelle exécution
# Un PARSE définit une nouvelle exécution, s'il n'est pas précédé par un PARSING IN CURSOR
# Un EXEC définit une nouvelle exécution s'il n'est pas précédé par un PARSE
# Un STAT définit une fin d'exécution - et il n'est pas systématiquement présent
# Une nouvelle exécution implique une fin d'exécution pour le curseur courant.

# Attention, tout ceci n'est valide que dans le cadre d'un curseur unique, afin d'éviter
# les ennuis qui pourraient venir de l'entrelacement de l'exécution du même SQL dans deux
# curseurs distincts.
#
# On va donc définir une exécution de la manière suivante:
#
# %curex   = (
#          base_timestamp   =>   ts du début de l'exécution,
#         sqlid      =>   id du sql exécuté
#         plan_hash   =>   valeur de hash du plan,
#          current_action   =>   parsing/parse/exec/fetch,
#          counts      =>   [(cnt,   cpu,   ela),(cnt, cpu, ela), (cnt, cpu, ela)], un element pour chaque action
#         rows      =>   nb de lignes fetchées
#      );

# Comme on l'a expliqué plus haut, cette structure doit être attachée au curseur plutot
# qu'au sqlid jusqu'à la fin de l'exécution.
# En fin d'exécution, le %curex doit être poussé dans une liste historique liée au sqlid, donc
# dans le hash des sqlid %as.
my %history;
sub save_current_exec_specs {
   my ($c) = @_;    # id de curseur
   if ( defined $ac{$c} ) {
      my $xxx = dclone( $ac{$c} );
      push @{$history{cur_sqlid($c)}}, $xxx;
      $ac{$c} = ();    # RAZ de l'exécution courante
   }
}

sub add_action_steps {
   our (
      $c,                       # id de curseur
      $type,                    # action PARSE/EXEC/FETCH
      $cpu,                     # conso CPU
      $ela,                     # durée écoulée
      $dr,                      # lectures physiques
      $cr,                      # lectures consistentes
      $cu,                      # lectures en mode courant
      $mis,                     # miss en shared pool
      $rows,                    # nombre de lignes
      $dep,                     # degré de récursivité
      $og,                      # mode d'optimisation
      $plh,                     # valeur de hash du plan
      $tim                      # horodatage de l'action
   ) = @_;
   our $cnt = 1;
   if ($debug =~ /AAS/) {
      printf( "\tAdding a %s with c=%s,e=%s,dr=%s,cr=%s,cu=%s,mis=%s,rows=%s,dep=%s,og=%s,plh=%s,tim=%s\n",
               $type,$cpu,$ela,$dr,$cr,$cu,$mis,$rows,$dep, $og, $plh, $tim );
   }
   no strict;
   no warnings;
   my $sqlid = cur_sqlid($c);

   $as{total}{$type}{count}++;
   $as{total}{count}++;

   $as{$sqlid}{$type}{count}++;
   $as{$sqlid}{count}++;

   for my $m (qw(cpu ela dr cr cu rows mis cnt)) {
      $as{$sqlid}{$type}{$m} += nvl(${$m});
      $as{$sqlid}{$m} += nvl(${$m});
      $as{total}{$type}{$m} += nvl(${$m});
      $as{total}{$m} += nvl(${$m});
   }
   use strict;
   use warnings;
   if ($tim) { $ac{$c}{last_tim}  = $tim; }
   if ($plh) { $ac{$c}{plan_hash} = $plh; }
   $ac{$c}{current_action} = $type;
}    # add_action_steps

## +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
## setup_new_exec
##
##   save current cursor executions spec
##   
#
sub setup_new_exec {
   my (
      $c,       # id de curseur
      $type,    # type d'action (PARSING IN CURSOR / PARSE ou EXEC)
      $s,       # sqlid
      $plh,     # hash value du plan
      $tim,     # timestamp
   ) = @_;      # un id de curseur, un sqlid, un plan hash, un timestamp,
   save_current_exec_specs($c);    # sauvegarde de l'exécution courante
   $ac{$c}{sqlid} = $s;
   $ac{$c}{base_timestamp} = $tim;
   if ($plh) { $ac{$c}{plan_hash} = $plh; }
   if ( $debug =~ /sne/ ) { printf( "sne: plh for %s is %s\n", $c, $plh ); }
   $ac{$c}{current_action} = $type;
}

sub is_new_exec {
   my (
      $c,                          # id de curseur
      $type,                       # $type d'action
   ) = @_;
   my @newxact = ( "PARSE", "EXEC", "PARSING IN CURSOR" );

   if ( grep { /$type/ } @newxact ) {
      if (  $type eq "PARSE"
         && $ac{$c}{current_action} eq "PARSING IN CURSOR" )
      {

         return 0;
      }
      if ( $type eq "EXEC" && $ac{$c}{current_action} eq "PARSE" ) {

         return 0;
      }
      return 1;
   }
   return 0;
}    # is_new_exec

sub elem {
   my (
      $c,       # id de curseur
      $type,    # action PARSE/EXEC/FETCH
      $cpu,     # conso CPU
      $ela,     # durée écoulée
      $dr,      # lectures physiques
      $cr,      # lectures consistentes
      $cu,      # lectures en mode courant
      $mis,     # miss en shared pool
      $rows,    # nombre de lignes
      $dep,     # degré de récursivité
      $og,      # mode d'optimisation
      $plh,     # valeur de hash du plan
      $tim      # horodatage de l'action
   ) = @_;
   if ( is_new_exec( $c, $type ) ) {
      setup_new_exec( $c, $type, cur_sqlid($c), $plh, $tim );
   }
   add_action_steps(
      $c,   $type, $cpu, $ela, $dr,  $cr, $cu,
      $mis, $rows, $dep, $og,  $plh, $tim
   );
}    # elem

sub close {
   $cursor = shift;
   my ( $cpu, $ela, $tim ) = @_;    # un id de curseur, CPU et durée elapsed, timestamp
   if ( $debug =~ /CLOSE/ ) {
      printf( "CLOSE #%ld cpu:%d, ela:%d,tim:%ld,sqlid=%s\n", $cursor, $cpu, $ela, $tim , cur_sqlid($cursor));
   }
   add_action_steps( $cursor, "CLOSE", $cpu, $ela, 0, 0, 0, 0, 0, 0, 0, 0, $tim );
}

# On identifie une nature de ligne avec un match (nnnmatch), on en extrait les champs
# et travaille le résultat avec une fonction (process_xxxx)
#

## +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
## tuple %basetrc des PARSING IN CURSOR
##
our $match_parsing =
'^PARSING IN CURSOR #(\d+) len=(\d+) dep=(\d+) uid=(\d+) oct=(\d+) lid=(\d+) tim=(\d+) hv=(\d+) ad=\'(\w+)\' sqlid=\'(\w+)\'';

sub process_parsing {
   $cursor = shift;
   my ( $len, $dep, $uid, $oct, $lid, $tim, $hv, $ad, $sqlid ) = @_;
   if ( $debug =~ /PIC/ ) {
      printf( "PIC #%ld uid:%d, tim:%ld, sqlid:%s\n",
         $cursor, $uid, $tim, $sqlid );
   }
   setup_new_exec( $cursor, "PARSING IN CURSOR", $sqlid, -1, $tim );
   $ac{$cursor}{sqlid} = $sqlid;
   if ( defined $as{$sqlid}{text} ) { return; }
   while ( readline($INF) ) {
      if   ( $_ =~ /^END OF STMT/ ) { return; }
      else                          { $as{$sqlid}{text} .= $_; }
   }
}    # process_parsing

## +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
## tuple %basetrc des PARSE/EXEC/FETCH
##
our $match_pef =
'^(PARSE|EXEC|FETCH) #(\d+):c=(\d+),e=(\d+),p=(\d+),cr=(\d+),cu=(\d+),mis=(\d+),r=(\d+),dep=(\d+),og=(\d+),plh=(\d+),tim=(\d+)';
sub process_pef {
   our ( $type, $cpu, $ela, $dr, $cr, $cu, $mis, $rows, $dep, $og, $plh, $tim );
   (
      $type, $cursor, $cpu, $ela, $dr,  $cr, $cu,
      $mis,  $rows,   $dep, $og,  $plh, $tim
   ) = @_;
   my $cursql = cur_sqlid($cursor);
   if ($debug =~ /PEF/) {
      printf("%s #%s: c=%s,e=%s,p=%s,cr=%s,cu=%s,mis=%s,r=%s,dep=%s,og=%s,plh=%s,time=%s,sqlid=%s\n",
         $type, $cursor, $cpu, $ela, $dr,  $cr, $cu,
         $mis,  $rows,   $dep, $og,  $plh, $tim, $cursql );
   }
   if ( !grep $plh, @{ $as{$cursql}{all_plans} } ) {
      push @{ $as{$cursql}{all_plans} }, $plh;
   }
   &elem(
      $cursor, $type, $cpu, $ela, $dr,  $cr, $cu,
      $mis,    $rows, $dep, $og,  $plh, $tim
   );
}    # process_pef
## +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
## tuple %basetrc des CLOSE
## c=0,e=16,dep=0,type=0,tim=1399295614046567
our $match_close = '^CLOSE #(\d+):c=(\d+),e=(\d+),dep=(\d+),type=(\d+),tim=(\d+)';
sub process_close {
   $cursor = shift;
   my ( $cpu, $ela, $dep, $cltyp, $tim ) = @_;
   if ($debug =~ /CLO/) {
      printf( "CLOSE #%s:c=%s,e=%s,dep=%s,type=%s,tim=%s,sqlid=%s\n",
         $cursor, $cpu, $ela, $dep, $cltyp, $tim,
         cur_sqlid($cursor) );
   }
   if ( my $cursql = cur_sqlid($cursor) ) {
      $as{$cursql}{CLOSE}{count}++;
      $as{$cursql}{count}++;
      $as{total}{CLOSE}{count}++;
      $as{total}{count}++;
      &close( $cursor, $cpu, $ela, $tim );
      no strict;
      for my $m (qw(cpu ela )) {
         $as{$cursql}{CLOSE}{$m} += nvl(${$m});
         $as{$cursql}{$m}        += nvl(${$m});
         $as{total}{CLOSE}{$m}   += nvl(${$m});
         $as{total}{$m}          += nvl(${$m});
      }
      use strict;
   }
}    # process_close

## +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
## tuple %basetrc des WAITs
##
our $match_wait = '^WAIT #(\d+): nam=\'([^\']+)\' ela= (\d+)';
sub process_wait {
   $cursor = shift;
   my ( $ev, $wela ) = @_;

   # On incremente le nombre d'attentes et le temps d'attente global
   # pour l'event courant
   $aw{$ev}{count}++;
   $aw{$ev}{ela} += $wela;

   # Et on fait de même pour le curseur courant
   $ac{$cursor}{waits}{$ev}{count}++;
   $ac{$cursor}{waits}{$ev}{ela} += $wela;

}    # process_wait

## +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
## tuple %basetrc des STATs
##
our $match_stat =
'^STAT #(\d+) id=(\d+) cnt=(\d+) pid=(\d+) pos=(\d+) obj=(\d+) op=\'([^\']+)\'';

sub process_stat {
   $cursor = shift;
   my ( $rank, $rows, $pos, $op ) = @_;
   my $current_plan = $ac{$cursor}{plan_hash};
   my $currank      = $rank - 1;
   $plans{$current_plan}{steps}->[$currank] = [ $rows, $pos, $op ]
     unless defined $plans{$current_plan}{steps}->[$currank];

}    # process_stat

my %basetrc;
## +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
## %basetrc
##
## Ensemble des tuples :
##      -   expression à matcher (expr)
##      -   fonction d'agrégation des valeurs obtenues (func)
##   servant à parser le fichier de trace
#
%basetrc = (
   "PARSING" => {
      expr => $match_parsing,
      func => \&process_parsing,
   },
   "PEF" => { # Parse/Exec/Fetch
      expr => $match_pef,
      func => \&process_pef,
   },
   "WAIT" => {
      expr => $match_wait,
      func => \&process_wait,
   },
   "STAT" => {
      expr => $match_stat,
      func => \&process_stat,
   },
   "CLOSE" => {
      expr => $match_close,
      func => \&process_close,
   },
);
## /////////////////////////////////////////////////////////////////

## +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
## choose_format
##
## Paramètres:
##   - le nom d'un format d'affichage,
##   - le nom d'un format d'affichage d'entête
##
##   Affecte à la sortie standard les paramètres d'affichage voulus.
#
sub choose_format {
   my ( $of, $fmt, $fmttop ) = @_;
   format_name $of $fmt;
   format_top_name $of $fmttop;
}    # choose_format
## /////////////////////////////////////////////////////////////////

## +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
## display_summary
##
## Paramètres:
##   - Un critere de tri
##
##   Affiche les métriques agrégées par sqlid
#
sub display_summary {
   my ($sort) = @_;
   my $k;
   my ($sqlid, $par_cnt, $exe_cnt, $fch_cnt,
      $cpu, $ela, $dr, $cr, $cu, $row );
   no warnings;
   format SUMMARY_TOP =
Sql_id           Parse   Exec    Fetch   Cpu         Elapsed     Disk reads  CR          Current     Rows
---------------- ------- ------- ------- ----------- ----------- ----------- ----------- ----------- -----------
.
   format SUMMARY =
@<<<<<<<<<<<<<   @###### @###### @###### @########## @########## @########## @########## @########## @########## 
      $sqlid, $par_cnt, $exe_cnt, $fch_cnt, $cpu, $ela, $dr, $cr, $cu, $row 
.
   use warnings;
   choose_format( $OUTF, 'SUMMARY', 'SUMMARY_TOP' );
   my $cnt = 0;

   for $k ( sort { $as{$b}{$sort} <=> $as{$a}{$sort} } keys %as ) {
      $cnt++;
      if ( $top > 0 && $cnt > $top ) { last; }
      ($sqlid, $par_cnt, $exe_cnt, $fch_cnt, $cpu, $ela, $dr, $cr, $cu, $row ) = 
      ( $k,$as{$k}{'PARSE'}{count},$as{$k}{'EXEC'}{count},$as{$k}{'FETCH'}{count},
      $as{$k}{cpu}/1000,$as{$k}{ela}/1000,$as{$k}{dr},$as{$k}{cr},$as{$k}{cu},$as{$k}{rows}
      );
      write $OUTF;
   }
}    # display_summary
## /////////////////////////////////////////////////////////////////

## +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
## display_waits
##
## Paramètres:
##   - un hash d'event contenant, pour chaque event, un nombre
##     d'occurrences (count) et une durée totale en microsecondes
##     (ela).
##
## Affiche les wait event stockés dans le hash en les triant par
## durées totales décroissantes.
##
sub display_waits {
   my $src = shift;
   my $ev;
   format WAITS_TOP =

Event                            Count      Total wait Avg wait
-------------------------------- ---------- ---------- ------------
.
   format WAITS =
@<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< @######### @######### @#######.### 
$ev, $src->{$ev}{count}, $src->{$ev}{ela}/1000, $src->{$ev}{ela}/(1000*$src->{$ev}{count})
.

   choose_format( $OUTF, 'WAITS', 'WAITS_TOP' );
   for $ev ( sort { $src->{$b}{ela} <=> $src->{$a}{ela} } keys %{$src} ) {
      write $OUTF;
   }
}    # display_waits
## /////////////////////////////////////////////////////////////////

## +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
## format_sql
##
## Paramètres:
##    - Un ordre SQL dans une chaîne de caractères
##
##   Reformate l'ordre SQL avec Text::Wrap en effectuant les césures
##   sur les virgules et les espaces, de façon à ce que les
##   lignes ne dépassent pas $sqlmaxlen caractères.
##
#
sub format_sql {
   my $sqltext = shift;
   return wrap( '', '', $sqltext );
}    # format_sql
## /////////////////////////////////////////////////////////////////

## +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
## display_plan
##
## Paramètres:
##   un plan hash value
##      - lignes traitées
##      - décalage sur la ligne
##      - opération
##
##   Affiche les informations relatives aux plan
#
sub display_plan {
   my $plan = shift;
   if ( !defined $plans{$plan} ) { return; }
   my ( $rows, $fmtop );
   format PLAN_TOP=
Rows        Operation
----------- --------------------------------------------------------------------------------------
.
   format PLAN=
@########## @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
$rows, $fmtop
.
   my @pos;
   my $mult = -1;
   choose_format( $OUTF, 'PLAN', 'PLAN_TOP' );

   for my $id ( @{ $plans{$plan}{steps} } ) {
      $rows = $id->[0];
      my $ofs = $id->[1];
      if ( $pos[$ofs] ) { $mult = $pos[$ofs] }
      else              { $mult++; $pos[$ofs] = $mult; }
      $fmtop = " " x $mult . $id->[2];
      write $OUTF;
   }
}    # display_plan
## /////////////////////////////////////////////////////////////////

## +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
## display_sqlid_txt
##
## Paramètres:
##    - Un sqlid
##      - Un flag indiquant si on affiche le plan
##      - Un flag indiquant si on affiche les waits
##
##   Affiche les informations relatives à un sqlid
#
sub display_sqlid_txt {
   our ( $id, $dplan, $dwait ) = @_;
   our (
         $parse_cnt, $parse_cpu, $parse_elapsed, $parse_miss, $parse_rows,
         $exec_cnt, $exec_cpu, $exec_elapsed, $exec_miss, $exec_rows,
         $fetch_cnt, $fetch_cpu, $fetch_elapsed, $fetch_miss, $fetch_rows, 
         $close_cnt, $close_cpu, $close_elapsed, $close_miss, $close_rows, 
         $total_cnt, $total_cpu, $total_elapsed, $total_miss, $total_rows, 
      ) =
      (
         $as{$id}{PARSE}{count}, $as{$id}{PARSE}{cpu}/1000, $as{$id}{PARSE}{ela}/1000,$as{$id}{PARSE}{mis},$as{$id}{PARSE}{rows},
         $as{$id}{EXEC}{count},  $as{$id}{EXEC}{cpu}/1000, $as{$id}{EXEC}{ela}/1000,$as{$id}{EXEC}{mis},$as{$id}{EXEC}{rows},
         $as{$id}{FETCH}{count}, $as{$id}{FETCH}{cpu}/1000, $as{$id}{FETCH}{ela}/1000,$as{$id}{FETCH}{mis},$as{$id}{FETCH}{rows},
         $as{$id}{CLOSE}{count}, $as{$id}{CLOSE}{cpu}/1000, $as{$id}{CLOSE}{ela}/1000,$as{$id}{CLOSE}{mis},$as{$id}{CLOSE}{rows},
         $as{$id}{count}, $as{$id}{cpu}/1000, $as{$id}{ela}/1000,$as{$id}{mis},$as{$id}{rows}
      );
   my $sql_text = format_sql($as{$id}{text});

   format SQL_TOP=
@<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
$pretty_delim
                                                 start of sqlid: @<<<<<<<<<<<<
$id

.

   format SQL=

              Count         CPU     Elapsed      Miss      Rows
        ----------- ----------- ----------- --------- --------- 
Parse : @########## @#######.## @#######.## @######## @########
$parse_cnt, $parse_cpu, $parse_elapsed, $parse_miss, $parse_rows
Exec  : @########## @#######.## @#######.## @######## @########
$exec_cnt, $exec_cpu, $exec_elapsed, $exec_miss, $exec_rows
Fetch : @########## @#######.## @#######.## @######## @########
$fetch_cnt, $fetch_cpu, $fetch_elapsed, $fetch_miss, $fetch_rows
Close : @########## @#######.## @#######.## @######## @########
$close_cnt, $close_cpu, $close_elapsed, $close_miss, $close_rows
        ----------- ----------- ----------- --------- ---------
Total : @########## @#######.## @#######.## @######## @########
$total_cnt, $total_cpu, $total_elapsed, $total_miss, $total_rows 

Full SQL Text:

@*
$sql_text

                                                   end of sqlid: @<<<<<<<<<<<<
$id
@<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
$pretty_delim

.

   choose_format( $OUTF, 'SQL', 'SQL_TOP' );
   write $OUTF;

   if ($dplan) {
      for my $plan ( @{ $as{$id}{all_plans} } ) {
         printf $OUTF, "sqlid: %s - plan hash value: %d\n", $id, $plan;
         display_plan($plan);
      }
   }
   &display_waits( $as{$id}{waits} ) if ($dwait);

}    # display_sqlid_txt
## /////////////////////////////////////////////////////////////////

my $display_sqlid = \&display_sqlid_txt;

## +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
## display_all_sql
##
## Paramètres:
##    - critere de tri (ela par defaut)
##      - affichage ou non du plan (defaut: y)
##      - affichage ou non des waits (defaut: n)
##      - affichage non agrégé   (tbc)
##
##   Affiche les informations relatives aux sqlid recensés
#
sub display_all_sql {
   my ( $sort, $dplan, $dwait ) = @_;
   for my $id ( sort { $as{$b}{$sort} <=> $as{$a}{$sort} } keys %as ) {
      next if $id eq "total" or $id eq "";
      $display_sqlid->( $id, $dplan, $dwait );
   }
}    # display_all_sql
## /////////////////////////////////////////////////////////////////

## \\\\\\\\\\\\\\ MAIN \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
&process_options();

while (<$INF>) {    # lit le fichier en entrée
   my @captures;
   for my $k ( keys %basetrc ) {                         # pour chaque référence
      if ( @captures = $_ =~ /$basetrc{$k}{expr}/ ) {    # match?
         &{ $basetrc{$k}{func} }(@captures);             # appel de la fonction de trt
         next ;                                          # on ne matche qu'une expression
      }
   }
}

# On sauve le dernier curseur
save_current_exec_specs($cursor);

if ($debug =~/STRU/) {
   print "=============== SQL =========================\n";
   print Dumper( %as );

   print "=============== CURSORS =====================\n";
   print Dumper( %ac );

   print "=============== WAITS =======================\n";
   print Dumper( %aw );
}
&display_summary($sort);
&display_all_sql( $sort, 1, $waits );

## \\\\\\\\\\\\\\ MAIN END \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
